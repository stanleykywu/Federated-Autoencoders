python client.py --dataset=cifar10 --classes plane car bird cat deer dog frog horse ship truck --epochs=15 --type server --latent_size 128
Files already downloaded and verified
Generating CIFAR-10 DataLoader with classes: ['plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
Files already downloaded and verified
Generating CIFAR-10 DataLoader with classes: ['plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
INFO flower 2022-05-03 21:53:01,818 | app.py:109 | Flower server running (3 rounds)
SSL is disabled
INFO flower 2022-05-03 21:53:01,819 | server.py:128 | Initializing global parameters
INFO flower 2022-05-03 21:53:01,819 | server.py:327 | Requesting initial parameters from one random client
INFO flower 2022-05-03 21:53:08,536 | server.py:330 | Received initial parameters from one random client
INFO flower 2022-05-03 21:53:08,537 | server.py:130 | Evaluating initial parameters
/Users/krish/Hack/school-git/Federated-Autoencoders/client.py:173: UserWarning: The use of `x.T` on tensors of dimension other than 2 to reverse their shape is deprecated and it will throw an error in a future release. Consider `x.mT` to transpose batches of matricesor `x.permute(*torch.arange(x.ndim - 1, -1, -1))` to reverse the dimensions of a tensor. (Triggered internally at  /Users/distiller/project/pytorch/aten/src/ATen/native/TensorShape.cpp:2318.)
  plt.imshow(np.squeeze(image).T)
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
INFO flower 2022-05-03 21:53:11,104 | server.py:133 | initial parameters (loss, other metrics): 0.0021353464107960463, {}
INFO flower 2022-05-03 21:53:11,104 | server.py:143 | FL starting
DEBUG flower 2022-05-03 21:53:11,104 | server.py:265 | fit_round: strategy sampled 10 clients (out of 10)
DEBUG flower 2022-05-03 21:54:49,660 | server.py:277 | fit_round received 10 results and 0 failures
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
INFO flower 2022-05-03 21:54:52,201 | server.py:158 | fit progress: (1, 0.00205519562587142, {}, 101.09601183400001)
INFO flower 2022-05-03 21:54:52,201 | server.py:209 | evaluate_round: no clients selected, cancel
DEBUG flower 2022-05-03 21:54:52,201 | server.py:265 | fit_round: strategy sampled 10 clients (out of 10)
DEBUG flower 2022-05-03 21:56:24,377 | server.py:277 | fit_round received 10 results and 0 failures
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
INFO flower 2022-05-03 21:56:26,796 | server.py:158 | fit progress: (2, 0.0020676825661212206, {}, 195.69071516699998)
INFO flower 2022-05-03 21:56:26,796 | server.py:209 | evaluate_round: no clients selected, cancel
DEBUG flower 2022-05-03 21:56:26,796 | server.py:265 | fit_round: strategy sampled 10 clients (out of 10)
DEBUG flower 2022-05-03 21:57:58,739 | server.py:277 | fit_round received 10 results and 0 failures
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
INFO flower 2022-05-03 21:58:01,194 | server.py:158 | fit progress: (3, 0.0020796877797693014, {}, 290.08772887500004)
INFO flower 2022-05-03 21:58:01,194 | server.py:209 | evaluate_round: no clients selected, cancel
INFO flower 2022-05-03 21:58:01,194 | server.py:182 | FL finished in 290.087864459
INFO flower 2022-05-03 21:58:01,194 | app.py:149 | app_fit: losses_distributed []
INFO flower 2022-05-03 21:58:01,194 | app.py:150 | app_fit: metrics_distributed {}
INFO flower 2022-05-03 21:58:01,194 | app.py:151 | app_fit: losses_centralized [(0, 0.0021353464107960463), (1, 0.00205519562587142), (2, 0.0020676825661212206), (3, 0.0020796877797693014)]

python client.py --dataset=cifar10 --classes plane --epochs=15 --type client --latent_size 128 & python client.py --dataset=cifar10 --classes car --epochs=15 --type client --latent_size 128 & python client.py --dataset=cifar10 --classes bird --epochs=15 --type client --latent_size 128 & python client.py --dataset=cifar10 --classes cat --epochs=15 --type client --latent_size 128 & python client.py --dataset=cifar10 --classes deer --epochs=15 --type client --latent_size 128 & python client.py --dataset=cifar10 --classes dog --epochs=15 --type client --latent_size 128 & python client.py --dataset=cifar10 --classes frog --epochs=15 --type client --latent_size 128 & python client.py --dataset=cifar10 --classes horse --epochs=15 --type client --latent_size 128 & python client.py --dataset=cifar10 --classes ship --epochs=15 --type client --latent_size 128 & python client.py --dataset=cifar10 --classes truck --epochs=15 --type client --latent_size 128